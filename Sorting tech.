//BASICS
//ADDITION OF N NUM IN ARRAY

#include <stdio.h>
#include <stdlib.h>

int sum(int arr[],int size){

    if (size==0){
        return -1;
    }

    if (size==1){
        return arr[0];
    }

    else{

        int halfsum = sum(arr+1,size-1);
        int s=arr[0]+halfsum;
        return s;

    }

    

}

int main(){

     int seed[]={1,2,3,4,5,6,7,8,9};

         printf("%d",sum(seed,9));

}





//BINARY SEARCH

/*#include <stdio.h>
#include <stdlib.h>

int binSrch(int arr[],int size,int key){

     int start=0;
     int end=size-1;

     int mid=start+end/2;

     while(start<=end){

        if(arr[mid]==key){
            printf("found");
            return mid;
        }
        
        if(arr[mid]<key){
            start=mid+1;
        }

        else{
            end=mid-1;
        }

        mid=(start+end)/2;

     }

     printf("not found") ;
     return -1;

}


int main(){

     int seed[]={1,2,3,4,5,6,7,8,9};

     binSrch(seed,9,0);



}



//BUBBLE SORT BUBS

#include <stdio.h>
#include <stdlib.h>

void bubbleSort(int *arr,int n){
    
    if (n==0||n==1){
        return;
    }

    for(int i=0;i<n;i++){
        if (arr[i]>arr[i+1]){
            int c = arr[i];
            arr[i] =arr[i + 1];
            arr[i + 1] = c;
        }
        
    }
    
    bubbleSort(arr,n-1);
}

prInt(int *arr,int size){

       for(int i=0;i<size;i++){
        printf("%d",arr[i]);
       }
           
}

int main(){

     int seed[]={9,8,7,6,5,4,3,2,1};

     prInt(seed,9);
     printf("\n");
     bubbleSort(&seed,9);
     prInt(&seed,9);


}



//MERGE SORT

#include <stdio.h>
#include <stdlib.h>

// Merges two subarrays of arr[].
// First subarray is arr[l..m]
// Second subarray is arr[m+1..r]
void merge(int arr[], int l, int m, int r)
{
	int i, j, k;
	int n1 = m - l + 1;
	int n2 = r - m;

	
	int L[n1], R[n2];

	
	for (i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];

	
	i = 0; // Initial index of first subarray
	j = 0; // Initial index of second subarray
	k = l; // Initial index of merged subarray
	while (i < n1 && j < n2) {
		if (L[i] <= R[j]) {
			arr[k] = L[i];
			i++;
		}
		else {
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	
	while (i < n1) {
		arr[k] = L[i];
		i++;
		k++;
	}

	
	while (j < n2) {
		arr[k] = R[j];
		j++;
		k++;
	}
}

void mergeSort(int arr[], int l, int r)
{
	if (l < r) {
		// Same as (l+r)/2, but avoids overflow for
		// large l and h
		int m = l + (r - l) / 2;

		// Sort first and second halves
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);

		merge(arr, l, m, r);
	}
}

void printArray(int A[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", A[i]);
	printf("\n");
}

int main()
{
	int arr[] = { 12, 11, 13, 5, 6, 7 };
	int arr_size = sizeof(arr) / sizeof(arr[0]);

	printf("Given array is \n");
	printArray(arr, arr_size);

	mergeSort(arr, 0, arr_size - 1);

	printf("\nSorted array is \n");
	printArray(arr, arr_size);
	return 0;
}



//SELECTION SORT

#include <stdio.h>
#include <stdlib.h>



void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

void selectionSort(int arr[],int n){

for (int i=0;i<n-1;i++){
    int minIndex = i ;
     for (int j=i+1;j<n;j++){
        if (arr[j]<arr[minIndex])
        minIndex=j;
     }
     swap(&arr[minIndex],&arr[i]);
}

}


void printArray(int A[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", A[i]);
	printf("\n");
}

int main()
{
	int arr[] = { 12, 11, 13, 5, 6, 7 };
	int arr_size = sizeof(arr) / sizeof(arr[0]);

	printf("Given array is \n");
	printArray(arr, arr_size);

	selectionSort(arr,arr_size);

	printf("\nSorted array is \n");
	printArray(arr, arr_size);
	return 0;
}


//SELECTION SORT

#include<stdio.h>
void quicksort(int number[25],int first,int last){
int i, j, pivot, temp;

if(first<last){
pivot=first;
i=first;
j=last;

while(i<j){
while(number[i]<=number[pivot]&&i<last)
i++;
while(number[j]>number[pivot])
j--;
if(i<j){
temp=number[i];
number[i]=number[j];
number[j]=temp;
}
}

temp=number[pivot];
number[pivot]=number[j];
number[j]=temp;
quicksort(number,first,j-1);
quicksort(number,j+1,last);

}
}

void printArray(int A[], int size)

{
int i;
for (i = 0; i < size; i++)
printf("%d ", A[i]);
printf("\n");
}

int main()
{
int arr[] = {9, 0, 3, 6, 5,};
int arr_size = sizeof(arr)/ sizeof(arr[0]);

printf("Given array is \n");
printArray(arr, arr_size);

quicksort(arr, 0, arr_size - 1);

printf("\nSorted array is \n");
printArray(arr, arr_size);
return 0;
}

